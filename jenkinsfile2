pipeline {
    agent any

     environment {
        IMAGE_NAME = 'new-repo:latest'
        TAG = 'latest'
        DB_USER = credentials('db-user')
        DB_PASSWORD = credentials('db-password')
    }
    
    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '20'))
    }
    
    triggers {
        pollSCM('H/30 * * * *')
    }
    
    stages {
        stage('Pull code from Github') {
            steps {
                git branch: 'master', url: 'https://github.com/Romi180400/Rest_Api.git/'
            }
        }
        
        stage('Create K8S Secret') {
            steps {
                script {
                    // Create K8S Secret
                    bat 'kubectl create secret generic my-db-credentials --from-literal=username=${DB_USER} --from-literal=password=${DB_PASSWORD}'
                }
            }
        }
        
        stage('Create K8S ConfigMap') {
            steps {
                script {
                    // Create K8S ConfigMap
                    bat 'kubectl create configmap my-db-config --from-literal=host=my-db-host'
                }
            }
        }
        
        stage('Run rest_app.py') {
            steps {
                bat 'start /min python rest_app.py'
            }
        }
        
        stage('Run backend testing') {
            steps {
                bat 'start /min python backend_testing.py'
            }
        }
        
        stage('Run clean_environment.py') {
            steps {
                bat 'start /min python clean_environment.py'
            }
        }
        
        stage('Build Docker image') {
            steps {
                bat 'docker build -t dockerfile .'
            }
        }
        
        stage('Login to Docker Hub') {
            steps {
                script {
                    bat 'docker login --username romio18 --password !Q2w3e4r5t'
                }
            }
        }
        
        stage('Tag the Image') {
            steps {
                script {
                    bat 'docker tag $IMAGE_NAME romio18/new-repo:$TAG'
                }
            }
        }
        
        stage('Push the Image to Docker Hub') {
            steps {
                script {
                    bat 'docker push romio18/new-repo:$TAG'
                }
            }
        }
        
        stage('Set compose image version') {
            steps {
                 bat "echo IMAGE_TAG=${BUILD_NUMBER} > .env"
            }
        }
        
        stage('Run docker-compose up') {
            steps {
                bat 'docker-compose up -d'
            }
        }
        
        stage('Test dockerized app') {
            steps {
                bat 'start /min python docker_backend_testing.py'
            }
        }
        
        stage('Clean up docker-compose environment') {
            steps {
                script {
                    bat 'docker-compose down && docker rmi <image-name>'
                }
            }
        }
        
        stage('Create MySQL deployment') {
            steps {
                script {
                    // Create PersistentVolume
                    bat 'kubectl apply -f mysql-pv.yaml'
                    
                    // Create PersistentVolumeClaim
                    bat 'kubectl apply -f mysql-pvc.yaml'
                    
                    // Create MySQL deployment
                    bat 'kubectl apply -f mysql-deployment.yaml'
                }
            }
        }
        
        stage('Change rest_app.py to use MySQL') {
            steps {
                script {
                    // Update the rest_app.py file to use MySQL
                    bat 'sed -i "s/REMOTE_DB_HOST/mysql-service/g" rest_app.py'
                    bat 'sed -i "s/REMOTE_DB_USER/${DB_USER}/g
